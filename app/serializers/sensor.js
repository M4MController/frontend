import {get} from '@ember/object';
import ApplicationSerializer from './application';
import DS from 'ember-data';

// todo: remove after https://github.com/M4MController/backend/issues/33 will completed
const testObdStub = {
  'pids_a': '10111110000111111010100000010011',
  'freeze_dtc': 'none',
  'fuel_status': 'none',
  'engine_load': '0.0 percent',
  'coolant_temp': '56 degc',
  'short_fuel_trim_1': '0.0 percent',
  'long_fuel_trim_1': '10.15625 percent',
  'short_fuel_trim_2': 'none',
  'long_fuel_trim_2': 'none',
  'fuel_pressure': 'none',
  'intake_pressure': 'none',
  'rpm': '0.0 revolutions_per_minute',
  'speed': '0 kph',
  'timing_advance': '0.0 degree',
  'intake_temp': '42 degc',
  'maf': '0.0 gps',
  'throttle_pos': '16.470588235294116 percent',
  'air_status': 'none',
  'o2_sensors': '((), (false, false, false, false), (false, false, true, true))',
  'o2_b1s1': 'none',
  'o2_b1s2': '0.45 volt',
  'o2_b1s3': 'none',
  'o2_b1s4': 'none',
  'o2_b2s1': 'none',
  'o2_b2s2': 'none',
  'o2_b2s3': 'none',
  'o2_b2s4': 'none',
  'obd_compliance': 'eobd (europe)',
  'o2_sensors_alt': 'none',
  'aux_input_status': 'none',
  'run_time': '0 second',
  'pids_b': '10100000000001011011000000010001',
  'distance_w_mil': '0 kilometer',
  'fuel_rail_pressure_vac': 'none',
  'fuel_rail_pressure_direct': '910 kilopascal',
  'o2_s1_wr_voltage': 'none',
  'o2_s2_wr_voltage': 'none',
  'o2_s3_wr_voltage': 'none',
  'o2_s4_wr_voltage': 'none',
  'o2_s5_wr_voltage': 'none',
  'o2_s6_wr_voltage': 'none',
  'o2_s7_wr_voltage': 'none',
  'o2_s8_wr_voltage': 'none',
  'commanded_egr': 'none',
  'egr_error': 'none',
  'evaporative_purge': '0.0 percent',
  'fuel_level': 'none',
  'warmups_since_dtc_clear': '255 count',
  'distance_since_dtc_clear': '7867 kilometer',
  'evap_vapor_pressure': 'none',
  'barometric_pressure': '100 kilopascal',
  'o2_s1_wr_current': '0.0 milliampere',
  'o2_s2_wr_current': 'none',
  'o2_s3_wr_current': 'none',
  'o2_s4_wr_current': 'none',
  'o2_s5_wr_current': 'none',
  'o2_s6_wr_current': 'none',
  'o2_s7_wr_current': 'none',
  'o2_s8_wr_current': 'none',
  'catalyst_temp_b1s1': '98.20000000000002 degc',
  'catalyst_temp_b2s1': 'none',
  'catalyst_temp_b1s2': 'none',
  'catalyst_temp_b2s2': 'none',
  'pids_c': '11111110110100000000010000000000',
  'status_drive_cycle': '<obd.obdresponse.status object at 0x7f730b99d550>',
  'control_module_voltage': '12.203 volt',
  'absolute_load': '0.0 percent',
  'commanded_equiv_ratio': '1.9988175 ratio',
  'relative_throttle_pos': '5.490196078431373 percent',
  'ambiant_air_temp': '42 degc',
  'throttle_pos_b': '16.470588235294116 percent',
  'throttle_pos_c': 'none',
  'accelerator_pos_d': '14.901960784313726 percent',
  'accelerator_pos_e': '14.901960784313726 percent',
  'accelerator_pos_f': 'none',
  'throttle_actuator': '1.5686274509803921 percent',
  'run_time_mil': 'none',
  'time_since_dtc_cleared': 'none',
  'max_maf': 'none',
  'fuel_type': 'none',
  'ethanol_percent': 'none',
  'evap_vapor_pressure_abs': 'none',
  'evap_vapor_pressure_alt': 'none',
  'short_o2_trim_b1': 'none',
  'long_o2_trim_b1': '-0.78125 percent',
  'short_o2_trim_b2': 'none',
  'long_o2_trim_b2': 'none',
  'fuel_rail_pressure_abs': 'none',
  'relative_accel_pos': 'none',
  'hybrid_battery_remaining': 'none',
  'oil_temp': 'none',
  'fuel_inject_timing': 'none',
  'fuel_rate': 'none',
};
;

export default class extends ApplicationSerializer.extend(DS.EmbeddedRecordsMixin, {}) {
  attrs = {
    name: 'name',
    deactivationDate: 'deactivation_date',
    company: 'company',
    activationDate: 'activation_date',
    controller: 'controller_id',
    lastValue: 'last_value',
    serviceCompany: {
      embedded: 'always',
    },
  };

  normalize(modelClass, resourceHash) {
    const type = get(resourceHash, 'characteristics.sensor_type');
    const additional = {
      type,
      charge: get(resourceHash, 'payments.charge'),
      overpayment: get(resourceHash, 'payments.overpayment'),
      forPayment: get(resourceHash, 'payments.for_payment'),
      unitName: get(resourceHash, 'characteristics.unit_of_measurement'),
      // todo: replace with type === 0 after https://github.com/M4MController/backend/issues/34 will completed
      value: type === undefined ? testObdStub : get(resourceHash, 'value'),
      valueMonth: get(resourceHash, 'stats.month'),
      valuePrevYear: get(resourceHash, 'stats.prev_month'),
      valuePrevYearAverage: get(resourceHash, 'stats.prev_year'),
      serviceCompany: get(resourceHash, 'finance.service_company'),
    };

    return super.normalize(modelClass,
      Object.assign(resourceHash, additional),
    );
  }
}
